{
    "$schema": "https://raw.githubusercontent.com/Microsoft/azure-pipelines-task-lib/master/tasks.schema.json",
    "id": "9cc4251b-4d50-48c3-819a-679484c9dcc3",
    "name": "VenafiVcert",
    "friendlyName": "Venafi Vcert",
    "description": "Simplify key generation and enrollment of machine identities (also known as SSL/TLS certificates and keys) that comply with enterprise security policy by using the Venafi Platform or Venafi Cloud.",
    "helpMarkDown": "",
    "category": "Utility",
    "visibility": [
        "Build",
        "Release"
    ],
    "author": "Greg Brownstein",
    "version": {
        "Major": 0,
        "Minor": 0,
        "Patch": 1
    },
    "groups": [
        {
            "name": "mainGroup",
            "displayName": "Main",
            "isExpanded": true
        },
        {
            "name": "enrollGroup",
            "displayName": "Request Certificate",
            "isExpanded": false,
            "visibleRule": "action = enrollAction"
        },
        {
            "name": "pickupGroup",
            "displayName": "Retrieve Certificate",
            "isExpanded": false,
            "visibleRule": "action = pickupAction"
        },
        {
            "name": "renewGroup",
            "displayName": "Renew Certificate",
            "isExpanded": false,
            "visibleRule": "action = renewAction"
        },
        {
            "name": "advanced",
            "displayName": "Advanced",
            "isExpanded": false
        }
    ],
    "instanceNameFormat": "Venafi vCert",
    "inputs": [
        {
            "name": "action",
            "type": "pickList",
            "label": "Action",
            "defaultValue": "enrollAction",
            "required": true,
            "helpMarkDown": "Select the action to perform",
            "options": {
                "enrollAction": "Request Certificate",
                "pickupAction": "Retrieve Certificate",
                "renewAction": "Renew Certificate",
                "getcredAction": "New Auth Token (TPP only)"
            }
        },
        {
            "name": "serverType",
            "type": "radio",
            "label": "Server Type",
            "defaultValue": "tpp",
            "required": true,
            "helpMarkDown": "Server type to connect to",
            "options": {
                "cloud": "Venafi Cloud",
                "tpp": "Trust Protection Platform (TPP)"
            },
            "visibleRule": "action != getcredAction",
            "groupName": "mainGroup"
        },
        {
            "name": "tppAuthType",
            "type": "radio",
            "label": "Auth Type",
            "defaultValue": "token",
            "required": true,
            "helpMarkDown": "",
            "options": {
                "token": "Token",
                "username": "Username/Password"
            },
            "visibleRule": "serverType = tpp",
            "groupName": "mainGroup"
        },
        {
            "name": "tppServerUrl",
            "type": "string",
            "label": "Server URL",
            "defaultValue": "",
            "required": true,
            "helpMarkDown": "TPP server URL, eg. tpp.venafi.example. 'https://' will be appended automatically.",
            "visibleRule": "serverType = tpp || action = getcredAction",
            "groupName": "mainGroup"
        },
        {
            "name": "tppAuthToken",
            "type": "string",
            "label": "Auth Token",
            "defaultValue": "",
            "required": true,
            "helpMarkDown": "Authentication token, requires TPP v20.1 or greater",
            "visibleRule": "tppAuthType = token",
            "groupName": "mainGroup"
        },
        {
            "name": "tppUsername",
            "type": "string",
            "label": "Username",
            "defaultValue": "",
            "required": true,
            "helpMarkDown": "",
            "visibleRule": "tppAuthType = username || action = getcredAction",
            "groupName": "mainGroup"
        },
        {
            "name": "tppPassword",
            "type": "string",
            "label": "Password",
            "defaultValue": "",
            "required": true,
            "helpMarkDown": "",
            "visibleRule": "tppAuthType = username || action = getcredAction",
            "groupName": "mainGroup"
        },
        {
            "name": "cloudApiKey",
            "type": "string",
            "label": "API Key",
            "defaultValue": "",
            "required": true,
            "helpMarkDown": "API key for Venafi Cloud",
            "visibleRule": "serverType = cloud",
            "groupName": "mainGroup"
        },
        {
            "name": "cloudZone",
            "type": "string",
            "label": "Project Zone",
            "defaultValue": "",
            "required": true,
            "helpMarkDown": "DevOps project zone where the certificate will be located.<br/><br/>Example: vvvvvvvv-wwww-xxxx-yyyy-zzzzzzzzzzzz",
            "visibleRule": "serverType = cloud",
            "groupName": "mainGroup"
        },
        {
            "name": "enrollCommonName",
            "type": "string",
            "label": "Common Name (CN)",
            "defaultValue": "",
            "required": true,
            "groupName": "enrollGroup"
        },
        {
            "name": "enrollZoneTpp",
            "type": "string",
            "label": "Target Folder Path",
            "defaultValue": "",
            "required": true,
            "visibleRule": "serverType = tpp",
            "helpMarkDown": "Folder path where the certificate object will be placed. \\VED\\Policy will be prepended, you only need to specify child folders under the root Policy folder.<br/><br/>Example: DevOps\\CorpApp",
            "groupName": "enrollGroup"
        },
        {
            "name": "enrollKeyPassword",
            "type": "string",
            "label": "Private Key Password",
            "defaultValue": "",
            "required": false,
            "helpMarkDown": "Password for encrypting the private key.  Specifying a value here will override the default non-encrypted private key.  It is recommended to use a secret variable, <https://docs.microsoft.com/en-us/azure/devops/pipelines/process/variables?view=azure-devops&tabs=yaml%2Cbatch#secret-variables>.",
            "groupName": "enrollGroup"
        },
        {
            "name": "enrollFormat",
            "type": "radio",
            "label": "Format",
            "defaultValue": "pem",
            "required": true,
            "options": {
                "pem": "PEM",
                "json": "JSON",
                "pkcs12": "PKCS#12",
                "jks": "JKS"
            },
            "helpMarkDown": "",
            "groupName": "enrollGroup"
        },
        {
            "name": "enrollChain",
            "type": "radio",
            "label": "Chain",
            "defaultValue": "root-last",
            "required": true,
            "options": {
                "root-last": "Root Last",
                "root-first": "Root First",
                "ignore": "Ignore"
            },
            "helpMarkDown": "Use to include the certificate chain in the output, and to specify where to place it in the file.",
            "groupName": "enrollGroup"
        },
        {
            "name": "enrollSanDns",
            "type": "string",
            "label": "DNS SAN",
            "defaultValue": "",
            "required": false,
            "helpMarkDown": "Use to specify a DNS Subject Alternative Name. To specify more than one, separate with a comma.",
            "groupName": "enrollGroup"
        },
        {
            "name": "enrollSanEmail",
            "type": "string",
            "label": "Email SAN",
            "defaultValue": "",
            "required": false,
            "visibleRule": "serverType = tpp",
            "helpMarkDown": "Use to specify a Email Subject Alternative Name. To specify more than one, separate with a comma.",
            "groupName": "enrollGroup"
        },
        {
            "name": "enrollSanIp",
            "type": "string",
            "label": "IP SAN",
            "defaultValue": "",
            "required": false,
            "visibleRule": "serverType = tpp",
            "helpMarkDown": "Use to specify a IP Subject Alternative Name. To specify more than one, separate with a comma.",
            "groupName": "enrollGroup"
        },
        {
            "name": "pickupBy",
            "type": "radio",
            "label": "Retrieve by",
            "defaultValue": "pickupId",
            "required": true,
            "options": {
                "pickupId": "ID",
                "pickupIdFile": "File path"
            },
            "visibleRule": "action = pickupAction",
            "groupName": "pickupGroup"
        },
        {
            "name": "pickupId",
            "type": "string",
            "label": "ID",
            "defaultValue": "",
            "required": true,
            "visibleRule": "action = pickupAction && pickupBy = pickupId",
            "groupName": "pickupGroup"
        },
        {
            "name": "pickupIdFile",
            "type": "string",
            "label": "File path",
            "defaultValue": "",
            "required": true,
            "visibleRule": "action = pickupAction && pickupBy = pickupIdFile",
            "groupName": "pickupGroup"
        },
        {
            "name": "todo",
            "label": "todo",
            "type": "pickList",
            "options": {
                "enroll/cn": "common name",
                "enroll/z": "diff for tpp and cloud.  Use to specify the folder path where the certificate object will be placed. VCert prepends \\VED\\Policy, so you only need to specify child folders under the root Policy folder.  Example: -z DevOps\\CorpApp",
                "enroll/tpp_user": "",
                "enroll/tpp_password": "",
                "enroll/key-password": "private key password.  without use --no-prompt.  support pw directly or via file",
                "enroll/csr": "local, service, file.  service not on cloud.",
                "enroll/format": "pem, json, pkcs12, jks",
                "enroll/file": "output file. required for format pkcs12 and jks",
                "enroll/chain": "root-last, root-first, ignore",
                "enroll/nickname": "name for new certificate object.  not on cloud.",
                "enroll/field": "custom fields, key=value format, multiple allowed.  not on cloud.",
                "enroll/no-pickup": "dont retrieve cert",
                "pickup-id-file": "id for subsequent actions.  stdout by default, offer option for env var",
                "pickup/pickup-id": "provide id for pickup, this or file below",
                "pickup/pickup-id-file": "provide file for id.  this or id above",
                "renew/id": "id for renewal or file:filepath",
                "renew/thumbprint": "sha1 thumbprint, string or read from cert file with file:filepath"
            },
            "groupName": "advanced"
        },
        {
            "name": "verbose",
            "label": "Verbose",
            "defaultValue": false,
            "required": false,
            "type": "boolean",
            "helpMarkDown": "Use to increase the level of logging detail, which is helpful when troubleshooting issues.",
            "groupName": "advanced"
        }
    ],
    "execution": {
        "Node10": {
            "target": "index.js"
        }
    }
}